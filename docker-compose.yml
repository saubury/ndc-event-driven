---
version: '3'
# Example based on https://github.com/saubury/stream-smarts

services:
  zookeeper:
    image: "confluentinc/cp-zookeeper:${CONF_VER}"
    container_name: zookeeper
    ports:
      - 2181:2181
    # volumes:
    #   - ./data/zookeeper/data:/data
    #   - ./data/zookeeper/datalog:/datalog
    environment:
      TZ: ${TZ_SET}
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: "confluentinc/cp-enterprise-kafka:${CONF_VER}"
    container_name: kafka
    depends_on:
      - zookeeper
    # volumes:
    #   - ./scripts:/scripts    
    #   - ./data/kafka/data:/var/lib/kafka/data
    ports:
    # Exposes 9092 for external connections to the broker
    # Use kafka:29092 for connections internal on the docker network
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - '9092:9092'
    environment:
      TZ: ${TZ_SET}
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - ./scripts:/scripts

  schema-registry:
    image: "confluentinc/cp-schema-registry:${CONF_VER}"
    container_name: schema-registry
    ports:
      - 8081:8081  
    depends_on:
      - zookeeper
      - kafka
    volumes:
      - ./scripts:/scripts    
    environment:
      TZ: ${TZ_SET}
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_AVRO_COMPATIBILITY_LEVEL: "none"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "WARN"

  

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:${CONF_VER}
    container_name: ksqldb-server
    ports:
      - '8088:8088'    
    depends_on:
      - kafka
      - schema-registry
    environment:
      TZ: ${TZ_SET}
      KSQL_BOOTSTRAP_SERVERS: kafka:29092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_CONNECT_URL: http://kafka-connect:8083
      KSQL_KSQL_SERVICE_ID: "my-ksqldb-server"
      KSQL_KSQL_EXTENSION_DIR: "/etc/ksql/ext"
      KSQL_AUTO_OFFSET_RESET: "earliest"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
    volumes:
      - ./scripts:/scripts

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:${CONF_VER}
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    volumes:
      - ./scripts:/scripts

  kafka-connect:
    container_name: kafka-connect
    image: confluentinc/cp-kafka-connect:${CONF_VER}
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    ports:
      - '8083:8083'
    environment:
      TZ: ${TZ_SET}
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_PLUGIN_PATH: /usr/share/java
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
      # External secrets config
      # See https://docs.confluent.io/current/connect/security.html#externalizing-secrets
      CONNECT_CONFIG_PROVIDERS: 'file'
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: 'org.apache.kafka.common.config.provider.FileConfigProvider'
    volumes:
      - ./scripts:/scripts


  ksqldb-datagen:
    image: confluentinc/ksqldb-examples:${CONF_VER}
    hostname: ksqldb-datagen
    container_name: ksqldb-datagen
    depends_on:
      - ksqldb-server
      - kafka
      - schema-registry
      - kafka-connect
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                        cub kafka-ready -b kafka:29092 1 40 && \
                        echo Waiting for Confluent Schema Registry to be ready... && \
                        cub sr-ready schema-registry 8081 40 && \
                        echo Waiting a few seconds for topic creation to finish... && \
                        sleep 11 && \
                        tail -f /dev/null'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      STREAMS_BOOTSTRAP_SERVERS: kafka:29092
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 8081
    volumes:
      - ./scripts:/scripts

  postgres:
    container_name: postgres
    image: 'postgres:${PG_VER}'
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      TZ: ${TZ_SET}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_SRC_PASSWORD}
      POSTGRES_DB: postgres
    #    PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./scripts:/scripts

  elasticsearch:
    container_name: elasticsearch
    image: 'docker.elastic.co/elasticsearch/elasticsearch-oss:${ELST_VER}'
    hostname: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    depends_on:
      - ksqldb-server
    environment:
      TZ: ${TZ_SET}
      discovery.type: 'single-node'

  kibana:
    container_name: kibana
    image: 'docker.elastic.co/kibana/kibana-oss:${ELST_VER}'
    # volumes:
    #   - ./config/kibana.yml:/usr/share/kibana/config/kibana.yml
    hostname: kibana
    environment:
      TZ: ${TZ_SET}
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      xpack.security.enabled: "false"
      discovery.type: "single-node"      

  clientapp:
    image: 'simonaubury/pythonapp:latest'
    build:
      context: docker/
    container_name: clientapp
    environment:
      TZ: ${TZ_SET}
    volumes:
      - ./python-app:/python-app
      - ./scripts:/scripts